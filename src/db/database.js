// src/db/database.js - Modul pro pr√°ci s datab√°z√≠ - P≈òEPS√ÅNO PRO MONGODB

// Importujeme ofici√°ln√≠ MongoDB ovladaƒç
const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb'); // P≈ôid√°no ObjectId pro pr√°ci s _id

let client; // Instance MongoDB klienta
let db;     // Objekt datab√°ze po p≈ôipojen√≠

// === Funkce pro nav√°z√°n√≠ spojen√≠ s datab√°z√≠ MongoDB ===
async function connect() {
    // Pokud u≈æ klient nebo db existuje a klient je p≈ôipojen√Ω, vr√°t√≠me existuj√≠c√≠ db instanci
    if (client && client.topology && client.topology.isConnected()) {
         console.log('üíæ MongoDB: Klient ji≈æ p≈ôipojen.');
         // Zkus√≠me vr√°tit existuj√≠c√≠ db instanci, pokud existuje
         if (db) return db;
         // Pokud klient je p≈ôipojen, ale db instance chyb√≠, zkus√≠me ji z√≠skat znovu
         try {
              // Z√≠sk√° n√°zev DB z URI, pokud nen√≠ explicitnƒõ nastaveno v .env jako DB_NAME
              const uri = process.env.MONGODB_URI;
              const dbName = process.env.DB_NAME || new URL(uri).pathname.substring(1);
              db = client.db(dbName);
              console.log(`üíæ MongoDB: Znovu z√≠sk√°na instance DB "${dbName}".`);
              return db;
         } catch (error) {
              console.error('‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ instance DB z existuj√≠c√≠ho klienta:', error);
              // Zde nen√≠ vhodn√© vyhazovat chybu d√°l, pokud u≈æ je klient p≈ôipojen√Ω
              return null; // Vrac√≠me null nebo undefined p≈ôi chybƒõ
         }
    }

    console.log('üíæ MongoDB: P≈ôipojuji k datab√°zi...');

    // Z√≠sk√°n√≠ URI pro p≈ôipojen√≠ z .env
    const uri = process.env.MONGODB_URI;

    if (!uri) {
        console.error('‚ùå MongoDB: Promƒõnn√° prost≈ôed√≠ MONGODB_URI nen√≠ nastavena!');
         // addLogEntry by zde selhala, proto≈æe DB je≈°tƒõ nen√≠ p≈ôipojen√°
        throw new Error('MongoDB URI pro p≈ôipojen√≠ nen√≠ nastaveno v souboru .env.');
    }

    try {
        // Vytvo≈ôen√≠ nov√©ho klienta
        client = new MongoClient(uri, {
            serverApi: {
                version: ServerApiVersion.v1,
                strict: true, // Striktn√≠ m√≥d, chyby p≈ôi nezn√°m√Ωch opc√≠ch
                deprecationErrors: true, // Zobrazovat chyby zastaral√Ωch funkc√≠
            },
            // Dal≈°√≠ opce pro p≈ôipojen√≠, pokud jsou pot≈ôeba (nap≈ô. poolSize, connectTimeoutMS)
            // maxPoolSize: 10, // Ekvivalent connectionLimit v MySQL pool
            // serverSelectionTimeoutMS: 5000, // Timeout pro v√Ωbƒõr serveru (nap≈ô. p≈ôi Atlas clusteru)
            // connectTimeoutMS: 10000, // Timeout pro nav√°z√°n√≠ spojen√≠
        });

        // Nav√°z√°n√≠ spojen√≠
        await client.connect();
        console.log('üíæ MongoDB: Klient √∫spƒõ≈°nƒõ p≈ôipojen k serveru!');

        // Z√≠sk√°n√≠ reference na datab√°zi
        // Pou≈æijeme n√°zev DB z .env (DB_NAME), pokud je nastaven.
        // Jinak zkus√≠me parsovat n√°zev DB z URI (nap≈ô. mongodb://host:port/my_database -> my_database)
        const dbName = process.env.DB_NAME || new URL(uri).pathname.substring(1);
        if (!dbName) {
             console.error('‚ùå MongoDB: N√°zev datab√°ze nen√≠ specifikov√°n v MONGODB_URI ani v DB_NAME v .env!');
             // addLogEntry by zde selhala
             await client.close();
             throw new Error('N√°zev datab√°ze nen√≠ specifikov√°n pro p≈ôipojen√≠ k MongoDB.');
        }
        db = client.db(dbName);


        console.log(`üíæ MongoDB: P≈ôipojeno k datab√°zi "${db.databaseName}".`);

        // Zde m≈Ø≈æeme p≈ô√≠padnƒõ prov√©st kontrolu a vytvo≈ôen√≠ pot≈ôebn√Ωch index≈Ø pro kolekce
        // Indexy pom√°haj√≠ s v√Ωkonem dotaz≈Ø, zejm√©na pro unik√°tn√≠ hodnoty nebo ƒçast√© filtry/≈ôazen√≠.
        try {
             // Index pro unik√°tn√≠ user_id v kolekci 'users' (user_id je string)
             // OPRAVENO: P≈ôid√°no collation, aby se vy≈ôe≈°il konflikt s existuj√≠c√≠m indexem
             // Index pro unik√°tn√≠ user_id v kolekci 'users' (user_id je string)
        // Index pro unik√°tn√≠ user_id v kolekci 'users' (user_id je string)
        // OPRAVENO: Pou≈æita CEL√Å specifikace collation z chybov√©ho logu pro shodu s existuj√≠c√≠m indexem
    await db.collection('users').createIndex(
            { user_id: 1 },
        {
            unique: true,
            collation: {
                locale: "en",
                caseLevel: false,
                caseFirst: "off",
                strength: 2,
                numericOrdering: false,
                alternate: "non-ignorable",
                maxVariable: "punct",
                normalization: false,
                backwards: false,
                version: "57.1" // P≈ôid√°n√≠ verze z logu pro p≈ôesnou shodu
            }
        }
    );
             // Index pro unik√°tn√≠ channel_id v kolekci 'active_channels' (channel_id je string)
             await db.collection('active_channels').createIndex({ channel_id: 1 }, { unique: true });

             // Indexy pro rychl√© hled√°n√≠ v message_history (nap≈ô. podle kan√°lu, podle ƒçasu)
             await db.collection('message_history').createIndex({ channel_id: 1, created_at: 1 });
             // Index na Discord message ID pro rychl√© nalezen√≠ zpr√°vy
              await db.collection('message_history').createIndex({ message_id: 1 }, { unique: true, sparse: true }); // sparse: true zajist√≠, ≈æe se indexuj√≠ jen dokumenty, kter√© message_id pole maj√≠

             // Indexy pro rychl√© hled√°n√≠ v memory (podle kombinace ID, podle kl√≠ƒçe, podle ƒçasu aktualizace)
              // OPRAVEN√ù INDEX pro specifickou interakci (v≈°echna 3 ID existuj√≠ a nejsou null)
              await db.collection('memory').createIndex({ channel_id: 1, user_id: 1, npc_id: 1, memory_key: 1 }, { unique: true, partialFilterExpression: { channel_id: { $exists: true, $ne: null }, user_id: { $exists: true, $ne: null }, npc_id: { $exists: true, $ne: null } } }); // Unik√°tnost, kdy≈æ pole existuj√≠ a NEJSOU NULL
              // OPRAVEN√ù INDEX pro glob√°ln√≠ NPC pamƒõ≈• (user_id a channel_id jsou null)
              await db.collection('memory').createIndex({ npc_id: 1, memory_key: 1 }, { unique: true, partialFilterExpression: { user_id: null, channel_id: null } });
              // OPRAVEN√ù INDEX pro glob√°ln√≠ U≈æivatel pamƒõ≈• (npc_id a channel_id jsou null)
              await db.collection('memory').createIndex({ user_id: 1, memory_key: 1 }, { unique: true, partialFilterExpression: { npc_id: null, channel_id: null } });
               // Voliteln√Ω index pro ƒçistƒõ glob√°ln√≠ pamƒõ≈• (v≈°echna 3 ID jsou null) - zva≈æ, zda je pot≈ôeba unik√°tnost i zde
               await db.collection('memory').createIndex({ memory_key: 1 }, { unique: true, partialFilterExpression: { channel_id: null, user_id: null, npc_id: null } });

              // Index pro ≈ôazen√≠ pamƒõti podle aktualizace (sestupnƒõ)
              await db.collection('memory').createIndex({ updated_at: -1 });

              // Indexy pro bot_logs
              await db.collection('bot_logs').createIndex({ timestamp: -1 }); // ≈òazen√≠ log≈Ø podle ƒçasu
              await db.collection('bot_logs').createIndex({ level: 1 }); // Filtrov√°n√≠ podle √∫rovnƒõ logu
              await db.collection('bot_logs').createIndex({ source: 1 }); // Filtrov√°n√≠ podle zdroje logu

              // Indexy pro npcs kolekci (pokud ji bude≈° m√≠t)
              await db.collection('npcs').createIndex({ id: 1 }, { unique: true }); // Index na ID (string) NPC
              await db.collection('npcs').createIndex({ name: 1 }); // Index na jm√©no pro hled√°n√≠/≈ôazen√≠


             console.log('üíæ MongoDB: Z√°kladn√≠ indexy ovƒõ≈ôeny/vytvo≈ôeny.');

        } catch (indexError) {
             console.error('‚ùå MongoDB: Chyba p≈ôi ovƒõ≈ôov√°n√≠/vytv√°≈ôen√≠ index≈Ø:', indexError);
             // Chyba indexov√°n√≠ nemus√≠ b√Ωt FATAL, bot se m≈Ø≈æe spustit, ale logujeme ji.
             // addLogEntry('ERROR', 'DB:IndexInitialization', `Chyba p≈ôi vytv√°≈ôen√≠ index≈Ø: ${indexError.message}`, null, null, null, indexError.stack); // P≈ô√≠klad - logov√°n√≠ do DB log≈Ø
        }


        return db; // Vrac√≠me objekt datab√°ze

    } catch (error) {
        console.error('‚ùå MongoDB: Kritick√° chyba p≈ôi p≈ôipojov√°n√≠ k datab√°zi:', error);
        // Zkus√≠me klienta zav≈ô√≠t, pokud se vytvo≈ôil, ale p≈ôipojen√≠ selhalo
        if (client) {
             try { await client.close(); } catch (closeError) { console.error('‚ùå MongoDB: Chyba p≈ôi zav√≠r√°n√≠ klienta po chybƒõ p≈ôipojen√≠:', closeError); }
        }
        client = null; // Resetujeme klienta
        db = null;     // Resetujeme db instanci
        // Zde logov√°n√≠ do DB log≈Ø sel≈æe, proto≈æe DB nen√≠ p≈ôipojen√°.
        throw error; // Chybu vyhod√≠me d√°l, aby ji zachytil k√≥d v bot.js
    }
}
// === KONEC Funkce: connect ===


// === Funkce pro ukonƒçen√≠ spojen√≠ s datab√°z√≠ MongoDB ===
async function close() {
    if (client) {
        console.log('üíæ MongoDB: Zav√≠r√°m klienta...');
        try {
            await client.close();
            client = null; // Nastav√≠me na null
            db = null;     // Nastav√≠me na null
            console.log('üíæ MongoDB: Klient √∫spƒõ≈°nƒõ zav≈ôen.');
        } catch (error) {
            console.error('‚ùå MongoDB: Chyba p≈ôi zav√≠r√°n√≠ klienta:', error);
            // Zde logov√°n√≠ do DB log≈Ø nemus√≠ fungovat, pokud DB nen√≠ p≈ôipojen√°
            throw error; // Chybu vyhod√≠me d√°l
        }
    } else {
        console.log('üíæ MongoDB: Klient ji≈æ byl zav≈ôen nebo neexistoval.');
    }
}
// === KONEC Funkce: close ===


// === Funkce pro p≈ôid√°n√≠ z√°znamu do kolekce log≈Ø (bot_logs) - P≈òEPS√ÅNO PRO MONGODB ===
// Tato funkce ukl√°d√° logy do kolekce 'bot_logs'.
// Mƒõla by b√Ωt vol√°na z r≈Øzn√Ωch m√≠st v aplikaci pro centralizovan√© logov√°n√≠.
async function addLogEntry(level, source, message, userId = null, channelId = null, guildId = null, stackTrace = null) {
    // Z√°kladn√≠ validace √∫rovnƒõ logu
    const validLevels = ['INFO', 'WARN', 'ERROR', 'DEBUG'];
    const logLevel = validLevels.includes(level.toUpperCase()) ? level.toUpperCase() : 'INFO'; // Default INFO

    // P≈ô√≠prava dokumentu pro vlo≈æen√≠ do kolekce bot_logs
    // MongoDB automaticky p≈ôid√° _id
    const logDocument = {
        timestamp: new Date(), // Aktu√°ln√≠ ƒças jako BSON Date objekt
        level: logLevel,
        source: source ? String(source) : 'unknown',
        message: message ? String(message) : '',
        user_id: userId ? String(userId) : null, // Ulo≈æ√≠me ID jako string nebo null
        channel_id: channelId ? String(channelId) : null,
        guild_id: guildId ? String(guildId) : null,
        stack_trace: stackTrace ? String(stackTrace) : null, // Ulo≈æ√≠me stack trace jako text nebo null
        // M≈Ø≈æe≈° p≈ôidat dal≈°√≠ pole dle pot≈ôeby pro lep≈°√≠ filtrov√°n√≠/anal√Ωzu log≈Ø
        // Nap≈ô. correlation_id pro propojen√≠ souvisej√≠c√≠ch log≈Ø jedn√© operace
    };

    // Pou≈æijeme try/catch pro samotn√© logov√°n√≠ do DB, aby p√°d logov√°n√≠ nezp≈Øsobil p√°d hlavn√≠ logiky.
    try {
        // Mus√≠me zajistit, ≈æe DB instance EXISTUJE P≈òEDT√çM, ne≈æ se pokus√≠me logovat.
        // P≈ôi FATAL ERRORech p≈ôed spojen√≠m s DB se logov√°n√≠ do DB nezda≈ô√≠.
        if (!db) {
             console.error('‚ùå FATAL ERROR (MongoDB Logov√°n√≠): DB instance nen√≠ inicializov√°na. Log z√°znam NEBYL ulo≈æen do DB konzole!', logDocument);
             // Zde zv√°≈æit alternativn√≠ logov√°n√≠ (soubor, extern√≠ slu≈æba), pokud je DB nedostupn√°.
             return; // Ukonƒç√≠me, pokud DB instance nen√≠ p≈ôipravena
        }

        // Z√≠sk√°me kolekci 'bot_logs' a vlo≈æ√≠me dokument
        const result = await db.collection('bot_logs').insertOne(logDocument);
        // console.log(`üíæ MongoDB: Log z√°znam ulo≈æen (ID: ${result.insertedId}, Level: ${logLevel}, Source: ${source}).`); // Voliteln√©, pro ladƒõn√≠ samotn√©ho logov√°n√≠

    } catch (error) {
        // Pokud sel≈æe logov√°n√≠ do DB (nap≈ô. probl√©m s kolekc√≠, pr√°vy), zalogujeme chybu v konzoli
        console.error('‚ùå FATAL ERROR (MongoDB Logov√°n√≠): Nepoda≈ôilo se ulo≈æit log z√°znam do datab√°ze MongoDB!', { logDocument, dbError: error });
        // Zde znovu zv√°≈æit alternativn√≠ logov√°n√≠ (soubor, extern√≠ slu≈æba).
    }
}
// === KONEC Funkce: addLogEntry (P≈òEPS√ÅNO PRO MONGODB) ===


// <<< ZDE JSOU FUNKCE P≈òEPSAN√â PRO MONGODB A ODOKOMENTOVAN√â >>>
// Vƒçetnƒõ tƒõch pro dashboard.

// === Funkce pro naƒç√≠t√°n√≠ v≈°ech aktivn√≠ch kan√°l≈Ø - P≈òEPS√ÅNO PRO MONGODB ===
async function loadActiveChannels() {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log('üíæ MongoDB: Naƒç√≠t√°m seznam aktivn√≠ch kan√°l≈Ø...');
    try {
         const activeChannelsCollection = db.collection('active_channels');
         // Najdi v≈°echny dokumenty v kolekci active_channels a p≈ôeved na pole
         const activeChannels = await activeChannelsCollection.find({}).toArray();
         console.log(`üíæ MongoDB: Naƒçteno ${activeChannels.length} aktivn√≠ch kan√°l≈Ø.`);
         // Vr√°t√≠ pole dokument≈Ø { _id, guild_id, channel_id, npc_id, ... }
         // messageHandler oƒçek√°v√° pole objekt≈Ø s kl√≠ƒçi guild_id, channel_id, npc_id. Mus√≠me transformovat.
         return activeChannels.map(doc => ({ guild_id: doc.guild_id, channel_id: doc.channel_id, npc_id: doc.npc_id })); // TRANSFORMACE PRO messageHandler
    } catch (error) {
         console.error('‚ùå MongoDB: Chyba p≈ôi naƒç√≠t√°n√≠ aktivn√≠ch kan√°l≈Ø:', error);
         addLogEntry('ERROR', 'DB:loadActiveChannels', `Chyba p≈ôi naƒç√≠t√°n√≠ aktivn√≠ch kan√°l≈Ø: ${error.message}`, null, null, null, error.stack);
         throw error;
    }
}


// === Funkce pro p≈ôid√°n√≠ aktivn√≠ho kan√°lu - P≈òEPS√ÅNO PRO MONGODB ===
async function addActiveChannel(guildId, channelId, npcId = null) { // npcId m≈Ø≈æe b√Ωt null
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log(`üíæ MongoDB: P≈ôid√°v√°m aktivn√≠ kan√°l ${channelId} pro guild ${guildId} s NPC ${npcId || 'null'}...`);
    try {
        const activeChannelsCollection = db.collection('active_channels');
        // Pou≈æijeme updateOne s upsert: true pro p≈ôid√°n√≠ nebo aktualizaci podle channel_id
        const filter = { channel_id: channelId };
        const updateDocument = {
             $set: { // Nastav√≠me nebo aktualizujeme tato pole
                 guild_id: guildId,
                 npc_id: npcId,
                 updated_at: new Date(), // ƒåas aktualizace
             },
             $setOnInsert: { // Nastav√≠ se pouze p≈ôi vlo≈æen√≠ (upsert: true)
                  created_at: new Date(), // ƒåas vytvo≈ôen√≠
             }
        };
        const options = { upsert: true }; // Vlo≈æ√≠ nov√Ω dokument, pokud nenalezen

        const result = await activeChannelsCollection.updateOne(filter, updateDocument, options);

        if (result.upsertedCount > 0) {
            console.log(`üíæ MongoDB: Aktivn√≠ kan√°l ${channelId} vlo≈æen (ID dokumentu: ${result.upsertedId}).`);
            return true; // Vlo≈æeno
        } else if (result.modifiedCount > 0 || result.matchedCount > 0) {
             console.log(`üíæ MongoDB: Aktivn√≠ kan√°l ${channelId} aktualizov√°n nebo nalezen.`);
             return true; // Aktualizov√°no nebo nalezen bez zmƒõny
        } else {
             console.warn(`üíæ MongoDB: Operace na aktivn√≠m kan√°lu ${channelId} nemƒõla vliv.`);
             addLogEntry('WARN', 'DB:addActiveChannel', `Operace na aktivn√≠m kan√°lu ${channelId} nemƒõla vliv.`, null, channelId, guildId, null);
             return false; // Nic se nezmƒõnilo (mo≈æn√° u≈æ byl v DB s toto≈æn√Ωmi daty)
        }

    } catch (error) {
        // Zde MongoDB ovladaƒç obvykle neh√°≈æe specifick√© k√≥dy chyb jako ER_DUP_ENTRY,
        // ale updateOne s upsert: true se postar√° o duplicity na unik√°tn√≠m indexu
        console.error(`‚ùå MongoDB: Chyba p≈ôi p≈ôid√°v√°n√≠/aktualizaci aktivn√≠ho kan√°lu ${channelId}:`, error);
        addLogEntry('ERROR', 'DB:addActiveChannel', `Chyba p≈ôi p≈ôid√°v√°n√≠/aktualizaci aktivn√≠ho kan√°lu: ${error.message}`, null, channelId, guildId, error.stack);
        throw error;
    }
}


// === Funkce pro odebr√°n√≠ aktivn√≠ho kan√°lu - P≈òEPS√ÅNO PRO MONGODB ===
async function removeActiveChannel(channelId) {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log(`üíæ MongoDB: Odstra≈àuji aktivn√≠ kan√°l ${channelId}...`);
    try {
        const activeChannelsCollection = db.collection('active_channels');
        // Sma≈æeme jeden dokument podle channel_id
        const result = await activeChannelsCollection.deleteOne({ channel_id: channelId });

        if (result.deletedCount > 0) {
            console.log(`üíæ MongoDB: Aktivn√≠ kan√°l ${channelId} √∫spƒõ≈°nƒõ odstranƒõn.`);
            return true; // Smaz√°no
        } else {
            console.log(`üíæ MongoDB: Aktivn√≠ kan√°l ${channelId} nenalezen pro odstranƒõn√≠.`);
            return false; // Nenalezeno
        }
    } catch (error) {
        console.error(`‚ùå MongoDB: Chyba p≈ôi odstra≈àov√°n√≠ aktivn√≠ho kan√°lu ${channelId}:`, error);
        addLogEntry('ERROR', 'DB:removeActiveChannel', `Chyba p≈ôi odstra≈àov√°n√≠ aktivn√≠ho kan√°lu: ${error.message}`, null, channelId, null, error.stack);
        throw error;
    }
}


// === Funkce pro nalezen√≠ nebo vytvo≈ôen√≠ u≈æivatele - P≈òEPS√ÅNO PRO MONGODB ===
async function findOrCreateUser(userData) { // userData = { id: '...', username: '...' }
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    // console.log(`üíæ MongoDB: Hled√°m nebo vytv√°≈ô√≠m u≈æivatele s ID ${userData.id}...`); // P≈ô√≠li≈° ƒçast√© logov√°n√≠
    try {
        const usersCollection = db.collection('users');
        // Najdeme dokument podle user_id
        const existingUser = await usersCollection.findOne({ user_id: userData.id }); // Hled√°me podle user_id

        if (existingUser) {
            // U≈æivatel nalezen, m≈Ø≈æeme p≈ô√≠padnƒõ aktualizovat username, pokud se zmƒõnil
             if (existingUser.username !== userData.username) {
                 await usersCollection.updateOne(
                      { user_id: userData.id },
                      { $set: { username: userData.username, updated_at: new Date() } } // Aktualizujeme username a ƒças
                 );
                 console.log(`üíæ MongoDB: U≈æivatel ${userData.username} (${userData.id}) aktualizov√°n.`);
             } else {
                 // console.log(`üíæ MongoDB: U≈æivatel ${userData.username} (${userData.id}) nalezen.`);
             }
            // Vr√°t√≠me zjednodu≈°enou strukturu, kterou volaj√≠c√≠ k√≥d (findOrCreateUser v messageHandleru) oƒçek√°v√°
            return { id: existingUser.user_id, username: existingUser.username };
        } else {
            // U≈æivatel nenalezen, vkl√°d√°me nov√Ω dokument
            console.log(`üíæ MongoDB: U≈æivatel s ID ${userData.id} nenalezen, vytv√°≈ô√≠m nov√©ho "${userData.username}"...`);
            const newUserDocument = {
                user_id: userData.id, // Discord ID u≈æivatele (ulo≈æ√≠me jako string)
                username: userData.username, // U≈æivatelsk√© jm√©no na Discordu
                created_at: new Date(), // ƒåas vytvo≈ôen√≠ dokumentu
                updated_at: new Date(), // ƒåas vytvo≈ôen√≠/aktualizace
                // Dal≈°√≠ pole o u≈æivateli, pokud je bude≈° pot≈ôebovat (nap≈ô. settings: {})
            };
            const result = await usersCollection.insertOne(newUserDocument);
            console.log(`üíæ MongoDB: U≈æivatel ${newUserDocument.username} (${newUserDocument.user_id}) vytvo≈ôen s ID dokumentu: ${result.insertedId}.`);
            // Vr√°t√≠me zjednodu≈°enou strukturu novƒõ vytvo≈ôen√©ho u≈æivatele, kterou volaj√≠c√≠ oƒçek√°v√°
            return { id: newUserDocument.user_id, username: newUserDocument.username };
        }
    } catch (error) {
        console.error(`‚ùå MongoDB: Chyba p≈ôi hled√°n√≠/vytv√°≈ôen√≠ u≈æivatele ${userData.id}:`, error);
        addLogEntry('ERROR', 'DB:findOrCreateUser', `Chyba p≈ôi hled√°n√≠/vytv√°≈ôen√≠ u≈æivatele: ${error.message}`, userData.id, null, null, error.stack);
        throw error; // Vyvol√° chybu d√°l
    }
}


// === Funkce pro ukl√°d√°n√≠ zpr√°vy u≈æivatele nebo bota do historie - P≈òEPS√ÅNO PRO MONGODB ===
async function saveMessageHistory(messageData) { // messageData = { channel_id, user_id, npc_id, content, is_bot, guild_id, id (Discord message ID) }
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
      console.log(`üíæ MongoDB: Ukl√°d√°m zpr√°vu do historie (kan√°l: ${messageData.channel_id}, user: ${messageData.user_id || 'null'}, npc: ${messageData.npc_id || 'null'}, is_bot: ${messageData.is_bot})...`);
     try {
         const historyCollection = db.collection('message_history');
         const messageDocument = {
             // Ulo≈æ√≠me Discord ID zpr√°vy pro p≈ô√≠padnou pozdƒõj≈°√≠ referenci/√∫pravu
             message_id: messageData.id, // Discord Message ID (string)
             channel_id: messageData.channel_id, // Discord Channel ID (string)
             guild_id: messageData.guild_id || null, // Discord Guild ID (string nebo null)
             user_id: messageData.user_id ? String(messageData.user_id) : null, // Discord User ID (string nebo null)
             npc_id: messageData.npc_id ? String(messageData.npc_id) : null,  // NPC ID (string nebo null)
             content: messageData.content,
             is_bot: messageData.is_bot || false,
             created_at: new Date(), // ƒåas vytvo≈ôen√≠
             // M≈Ø≈æe≈° p≈ôidat dal≈°√≠ metadata, nap≈ô. embeds, attachments, atd.
         };
         const result = await historyCollection.insertOne(messageDocument);
          // console.log(`üíæ MongoDB: Zpr√°va ulo≈æena do historie s ID dokumentu: ${result.insertedId}`); // P≈ô√≠li≈° ƒçast√© logov√°n√≠
         return result.insertedId; // MongoDB insertOne vrac√≠ objekt s insertedId (_id nov√©ho dokumentu)
     } catch (error) {
         console.error('‚ùå MongoDB: Chyba p≈ôi ukl√°d√°n√≠ zpr√°vy do historie:', error);
         // Logujeme chybu, ale p√°d ukl√°d√°n√≠ historie by nemƒõl shodit bota
         addLogEntry('ERROR', 'DB:saveMessageHistory', `Chyba p≈ôi ukl√°d√°n√≠ zpr√°vy do historie: ${error.message}`, messageData.user_id, messageData.channel_id, messageData.guild_id, error.stack);
         // throw error; // Obvykle se u ukl√°d√°n√≠ historie nehod√≠ vyhazovat chybu d√°l
     }
}

// === Funkce pro ukl√°d√°n√≠ pamƒõ≈•ov√©ho "chunku" (z AI anal√Ωzy) - P≈òEPS√ÅNO PRO MONGODB ===
async function saveMemoryChunk(channelId, userId, npcId, key, value) {
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
     console.log(`üíæ MongoDB: Ukl√°d√°m/aktualizuji pamƒõ≈•ov√Ω z√°znam: Kan√°l=${channelId || 'null'}, U≈æivatel=${userId || 'null'}, NPC=${npcId || 'null'}, Kl√≠ƒç="${key}"`);
     try {
         const memoryCollection = db.collection('memory');
         const filter = {
             channel_id: channelId || null, // Bude filtrovat na null, pokud je channelId null
             user_id: userId || null,       // Bude filtrovat na null, pokud je userId null
             npc_id: npcId || null,         // Bude filtrovat na null, pokud je npcId null
             memory_key: key,
         };
         const updateDocument = {
             // Pou≈æijeme $set pro nastaven√≠ hodnoty a aktualizovan√©ho ƒçasu
             $set: {
                 memory_value: value,
                 updated_at: new Date(), // Aktualizujeme ƒças p≈ôi ka≈æd√© zmƒõnƒõ/vlo≈æen√≠ p≈ôes upsert
             },
             // Pou≈æijeme $setOnInsert pro nastaven√≠ ƒçasu vytvo≈ôen√≠ pouze p≈ôi vlo≈æen√≠ nov√©ho dokumentu
             $setOnInsert: {
                 created_at: new Date(),
             },
         };
         const options = { upsert: true }; // Pokud dokument s filtrem neexistuje, vlo≈æ√≠ se nov√Ω

         const result = await memoryCollection.updateOne(filter, updateDocument, options);

         // Kontrola v√Ωsledku operace
         if (result.upsertedCount > 0) {
             console.log(`üíæ MongoDB: Nov√Ω pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" vlo≈æen (ID dokumentu: ${result.upsertedId}).`);
         } else if (result.modifiedCount > 0) {
             console.log(`üíæ MongoDB: Pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" aktualizov√°n.`);
         } else if (result.matchedCount > 0) {
             // console.log(`üíæ MongoDB: Pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" nalezen, ≈æ√°dn√° zmƒõna dat.`); // Voliteln√©, pro debug
         } else {
             console.warn(`üíæ MongoDB: Operace na pamƒõ≈•ov√©m z√°znamu pro kl√≠ƒç "${key}" nemƒõla vliv (nenalezen ani vlo≈æen).`);
             addLogEntry('WARN', 'DB:saveMemoryChunk', `Operace na pamƒõti "${key}" nemƒõla vliv.`, userId, channelId, null, null);
         }


         // Vrac√≠ true pro √∫spƒõch, nebo ID vlo≈æen√©ho dokumentu, pokud bylo vlo≈æeno
         return result.upsertedId || (result.modifiedCount > 0);

     } catch (error) {
         console.error(`‚ùå MongoDB: Chyba p≈ôi ukl√°d√°n√≠/aktualizaci pamƒõ≈•ov√©ho z√°znamu (Kl√≠ƒç: "${key}"):`, error);
         addLogEntry('ERROR', 'DB:saveMemoryChunk', `Chyba p≈ôi ukl√°d√°n√≠/aktualizaci pamƒõti: ${error.message}`, userId, channelId, null, error.stack);
         throw error;
     }
}


// === Funkce pro naƒç√≠t√°n√≠ historie zpr√°v (pro kontext AI a dashboard) - P≈òEPS√ÅNO PRO MONGODB ===
async function loadMessageHistory(channelId, limit = 25) { // Limit nastaven na 15 pro AI kontext
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
      console.log(`üíæ MongoDB: Naƒç√≠t√°m historii zpr√°v pro kan√°l ${channelId} (limit ${limit})...`);
     try {
          const historyCollection = db.collection('message_history');
          // Najdeme dokumenty s dan√Ωm channel_id, se≈ôad√≠me sestupnƒõ podle ƒçasu vytvo≈ôen√≠, omez√≠me limitem a p≈ôevedeme na pole
          // Pro kontext AI je obvykle lep≈°√≠ m√≠t nejstar≈°√≠ zpr√°vu prvn√≠.
          const history = await historyCollection.find(
               { channel_id: channelId }, // Filtr podle ID kan√°lu
               { sort: { created_at: -1 }, limit: limit } // Opce: ≈ôazen√≠ (sestupnƒõ pro nejnovƒõj≈°√≠), limit
          ).toArray(); // P≈ôevedeme v√Ωsledek na pole

          // Zpr√°vy jsou teƒè od nejnovƒõj≈°√≠ k nejstar≈°√≠ (d√≠ky sort: -1).
          // Pro AI kontext a obvykle i zobrazen√≠ historie je lep≈°√≠ m√≠t nejstar≈°√≠ zpr√°vu prvn√≠.
          history.reverse(); // Obr√°t√≠me pole

          console.log(`üíæ MongoDB: Naƒçteno ${history.length} z√°znam≈Ø historie zpr√°v pro kan√°l ${channelId}.`);

          // MongoDB dokumenty obsahuj√≠ _id, channel_id, user_id, npc_id, content, is_bot, created_at atd.
          // Pro dashboard zobrazen√≠ a p≈ô√≠padnƒõ i pro AI kontext s jm√©ny,
          // bude pot≈ôeba z√≠skat username a npc_name. To lze udƒõlat:
          // 1. Ulo≈æen√≠m jmen p≈ô√≠mo do dokumentu historie (nen√≠ ide√°ln√≠).
          // 2. Naƒçten√≠m jmen u≈æivatel≈Ø a NPC zvl√°≈°≈• a jejich p≈ôid√°n√≠m ke zpr√°v√°m (requiruje fetch z users/npcs kolekc√≠).
          // 3. Pou≈æit√≠m aggregation pipeline (pokroƒçil√©).
          // Prozat√≠m vrac√≠me ƒçist√© dokumenty. Volaj√≠c√≠ k√≥d (messageHandler, dashboard server) si mus√≠ jm√©na z√≠skat s√°m.

          return history; // Vrac√≠ pole dokument≈Ø z historie
     } catch (error) {
          console.error(`‚ùå MongoDB: Chyba p≈ôi naƒç√≠t√°n√≠ historie zpr√°v pro kan√°l ${channelId}:`, error);
          addLogEntry('ERROR', 'DB:loadMessageHistory', `Chyba p≈ôi naƒç√≠t√°n√≠ historie zpr√°v: ${error.message}`, null, channelId, null, error.stack);
          throw error;
     }
}


// === Funkce pro naƒç√≠t√°n√≠ pamƒõ≈•ov√Ωch "chunk≈Ø" pro kontext AI - P≈òEPS√ÅNO PRO MONGODB ===
async function loadMemoryChunks(channelId = null, userId = null, npcId = null) {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log(`üíæ MongoDB: Naƒç√≠t√°m pamƒõ≈•ov√© z√°znamy pro kontext (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'})...`);
    try {
        const memoryCollection = db.collection('memory');

        // MongoDB filtr pro nalezen√≠ relevantn√≠ch pamƒõ≈•ov√Ωch chunk≈Ø pro kontext AI
        // Hled√°me z√°znamy, kter√© odpov√≠daj√≠ jedn√© z relevantn√≠ch kombinac√≠ ID (vƒçetnƒõ null)
        const filter = {
             $or: [
                 // 1. Pamƒõ≈• specifick√° pro interakci v kan√°lu (v≈°echny 3 ID MUS√ç sedƒõt - i null)
                 { channel_id: channelId, user_id: userId, npc_id: npcId },
                 // 2. Glob√°ln√≠ pamƒõ≈• u≈æivatele (USER mus√≠ sedƒõt - i null, channel a npc MUS√ç b√Ωt null)
                 { user_id: userId, channel_id: null, npc_id: null },
                 // 3. Glob√°ln√≠ pamƒõ≈• NPC (NPC mus√≠ sedƒõt - i null, channel a user MUS√ç b√Ωt null)
                 { npc_id: npcId, channel_id: null, user_id: null },
                 // ZDE JE D≈ÆLE≈ΩIT√â P≈òIDAT DAL≈†√ç RELEVANTN√ç KOMBINACE PRO AI KONTEXT
                 // Nap≈ô. pamƒõ≈• u≈æivatele v JAK√âMKOLI kan√°lu s T√çMTO NPC:
                  { user_id: userId, npc_id: npcId, channel_id: { $ne: null } }, // User + NPC + non-null channel
                 // Nap≈ô. pamƒõ≈• u≈æivatele v JAK√âMKOLI kan√°lu (bez ohledu na NPC):
                  { user_id: userId, channel_id: { $ne: null }, npc_id: null }, // User + non-null channel + null npc
                 // ATD. - Z√°vis√≠ na tom, jakou pamƒõ≈• AI pro kontext pot≈ôebuje.
                 // Tuto sadu podm√≠nek filtrujeme, aby neobsahovala kombinace, kde vstupn√≠ ID je undefined.
             ].filter(condition => {
                 // Odfiltrujeme podm√≠nky, pokud nƒõjak√Ω kl√≠ƒç v podm√≠nce m√° hodnotu 'undefined'.
                 // To se m≈Ø≈æe st√°t, pokud volaj√≠c√≠ k√≥d po≈°le undefined m√≠sto null pro ID.
                 // Using `hasOwnProperty` and checking against `undefined` is one way.
                 return Object.keys(condition).every(key => condition[key] !== undefined);
             })
        };

        // Pokud po filtrov√°n√≠ $or pole podm√≠nek je pr√°zdn√©, znamen√° to, ≈æe nebyly zad√°ny smyslupln√© parametry
        if (filter.$or.length === 0) {
            console.warn("üíæ MongoDB: loadMemoryChunks vol√°na bez smyslupln√Ωch filtr≈Ø. Vrac√≠m pr√°zdn√© pole.");
            return []; // Vrac√≠me pr√°zdn√© pole
        }


        // M≈Ø≈æe≈° p≈ôidat ≈ôazen√≠ a limit, pokud chce≈° omezit naƒç√≠t√°n√≠ pamƒõti pro kontext (nap≈ô. podle updated_at DESC LIMIT 20 pro nejnovƒõj≈°√≠)
        const options = { sort: { updated_at: -1 }, limit: 20 }; // P≈ô√≠klad opc√≠ pro ≈ôazen√≠ (nejnovƒõj≈°√≠ pamƒõ≈• prvn√≠) a limit

        const memory = await memoryCollection.find(filter, options).toArray(); // Najdi dokumenty a p≈ôeved je na pole

        console.log(`üíæ MongoDB: Naƒçteno ${memory.length} pamƒõ≈•ov√Ωch z√°znam≈Ø pro kontext.`);

        // Vr√°t√≠me pole dokument≈Ø z pamƒõti. Volaj√≠c√≠ k√≥d (memoryManager) si data transformuje, jak pot≈ôebuje.
        // Dokumenty obsahuj√≠ { _id, channel_id, user_id, npc_id, memory_key, memory_value, created_at, updated_at }
        return memory;

    } catch (error) {
        console.error(`‚ùå MongoDB: Chyba p≈ôi naƒç√≠t√°n√≠ pamƒõ≈•ov√Ωch z√°znam≈Ø pro kontext (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'}):`, error);
        addLogEntry('ERROR', 'DB:loadMemoryChunks', `Chyba p≈ôi naƒç√≠t√°n√≠ pamƒõti pro kontext: ${error.message}`, userId, channelId, null, error.stack);
        throw error;
    }
}


// === Funkce pro synchronizaci NPC konfigurac√≠ s datab√°zi - P≈òEPS√ÅNO PRO MONGODB ===
async function syncNpcConfigs(npcConfigs) { // npcConfigs = { 'npcId': { name: '...', basePrompt: '...', description: '...' }, ... }
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log('üíæ MongoDB: Spou≈°t√≠m synchronizaci NPC konfigurac√≠...');
    if (!npcConfigs || Object.keys(npcConfigs).length === 0) {
        console.warn('üíæ MongoDB: ≈Ω√°dn√© NPC konfigurace k synchronizaci.');
        return;
    }
    try {
        const npcsCollection = db.collection('npcs');

        for (const npcId in npcConfigs) {
            if (Object.hasOwnProperty.call(npcConfigs, npcId)) {
                const npc = npcConfigs[npcId];
                 // Ovƒõ≈ôen√≠ pot≈ôebn√Ωch vlastnost√≠ NPC objektu
                 if (!npc || typeof npc.name !== 'string' || typeof npc.basePrompt !== 'string' || typeof npc.description !== 'string') {
                     console.warn(`üíæ MongoDB: P≈ôeskakuji synchronizaci NPC s ID ${npcId} - chyb√≠ nebo maj√≠ nespr√°vn√Ω typ pot≈ôebn√© vlastnosti (name, basePrompt, description).`, npc);
                     addLogEntry('WARN', 'DB:syncNpcConfigs', `P≈ôeskoƒçena synchronizace NPC ${npcId} - chyb√≠/≈°patn√Ω typ vlastnost√≠.`, null, null, null, null);
                     continue;
                 }

                console.log(`üíæ MongoDB: Synchronizuji NPC ${npcId} (${npc.name})...`);

                // Filtr pro nalezen√≠ NPC podle jeho ID
                const filter = { id: npcId }; // Pou≈æ√≠v√°me pole 'id' v dokumentu, kter√© odpov√≠d√° kl√≠ƒçi v npcConfigs (string)

                // Dokument s daty NPC, kter√© chceme nastavit nebo aktualizovat
                 // Pou≈æijeme updateOne s opc√≠ upsert: true
                 // $set: nastav√≠ v≈°echna pole, kter√° se mohou mƒõnit
                 // $setOnInsert: nastav√≠ pole pouze p≈ôi prvn√≠m vlo≈æen√≠ (id a created_at)
                const updateDoc = {
                    $set: {
                        name: npc.name,
                        basePrompt: npc.basePrompt,
                        description: npc.description,
                        updated_at: new Date(), // Aktualizujeme ƒças p≈ôi ka≈æd√© zmƒõnƒõ/vlo≈æen√≠
                        // P≈ôidej zde dal≈°√≠ pole, kter√° chce≈° aktualizovat
                         // napr. avatar_url: npc.avatar_url || null,
                         // napr. settings: npc.settings || {} // Vlo≈æ√≠ objekt nastaven√≠
                    },
                     $setOnInsert: {
                           id: npcId, // Nastav√≠ ID pouze p≈ôi vlo≈æen√≠ nov√©ho dokumentu
                           created_at: new Date(), // Nastav√≠ ƒças vytvo≈ôen√≠ pouze p≈ôi vlo≈æen√≠
                      }
                 };

                const options = { upsert: true }; // Vlo≈æit nov√Ω dokument, pokud nenalezen

                const result = await npcsCollection.updateOne(filter, updateDoc, options);


                // Voliteln√© logov√°n√≠ v√Ωsledku updateOne
                 if (result.upsertedCount > 0) {
                     console.log(`üíæ MongoDB: NPC ${npcId} vlo≈æen (ID dokumentu: ${result.upsertedId}).`);
                 } else if (result.modifiedCount > 0) {
                     console.log(`üíæ MongoDB: NPC ${npcId} aktualizov√°n.`);
                 } else if (result.matchedCount > 0) {
                     // console.log(`üíæ MongoDB: NPC ${npcId} nalezen, ≈æ√°dn√° zmƒõna dat.`); // Voliteln√©, pokud nechce≈° logovat pro nemodifikovan√©
                 } else {
                      // Tento p≈ô√≠pad by nemƒõl nastat s upsert: true, leda≈æe by do≈°lo k chybƒõ nebo by filtr nesedƒõl
                      console.warn(`üíæ MongoDB: Operace updateOne na NPC ${npcId} nemƒõla vliv.`);
                       addLogEntry('WARN', 'DB:syncNpcConfigs', `Operace updateOne na NPC ${npcId} nemƒõla vliv.`, null, null, null, null);
                 }

            } // Konec if (Object.hasOwnProperty.call...)
        } // Konec for loop

         // Volitelnƒõ: Smazat NPC z DB, kter√© u≈æ nejsou v npcConfigs souboru
         // Toto by vy≈æadovalo naƒç√≠st v≈°echna NPC z DB, porovnat s npcConfigs kl√≠ƒçi a smazat ty, kter√© chyb√≠.
         // const existingNpcIdsInDb = (await npcsCollection.find({}, { projection: { id: 1 } }).toArray()).map(doc => doc.id);
         // const npcIdsInConfigs = Object.keys(npcConfigs);
         // const npcIdsToRemove = existingNpcIdsInDb.filter(dbId => !npcIdsInConfigs.includes(dbId));
         // if (npcIdsToRemove.length > 0) {
         //      console.log(`üíæ MongoDB: Ma≈æu ${npcIdsToRemove.length} NPC, kter√© ji≈æ nejsou v konfiguraci: ${npcIdsToRemove.join(', ')}.`);
         //      await npcsCollection.deleteMany({ id: { $in: npcIdsToRemove } });
         // }


        console.log(`üíæ MongoDB: Synchronizace NPC konfigurac√≠ dokonƒçena. Zpracov√°no ${Object.keys(npcConfigs).length} NPC.`);

    } catch (error) {
        console.error('‚ùå MongoDB: Chyba bƒõhem synchronizace NPC konfigurac√≠:', error);
        addLogEntry('ERROR', 'DB:syncNpcConfigs', `Chyba p≈ôi synchronizaci NPC konfigurac√≠: ${error.message}`, null, null, null, error.stack);
        throw error; // Vyvol√° chybu d√°l
    }
}


// <<< ZDE JSOU FUNKCE PRO DASHBOARD, KTER√â P≈òEP√ç≈†EME A ODOKOMENTUJEME >>>
// Jsou nyn√≠ p≈ôepsan√© a odkomentovan√©.

// === Funkce pro z√≠sk√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø z DB (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
// Tato funkce je stejn√° jako getUniqueUserCount a m≈Ø≈æe ji nahradit, nebo getUniqueUserCount volat tuto.
// Pou≈æijeme tuto novƒõ p≈ôepsanou a uprav√≠me export.
async function getUserCount() {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log('üíæ MongoDB: Z√≠sk√°v√°m celkov√Ω poƒçet u≈æivatel≈Ø...');
    try {
        // Poƒç√≠t√°me poƒçet dokument≈Ø v kolekci 'users'
        const userCount = await db.collection('users').countDocuments({}); // {} znamen√° bez filtru, poƒç√≠tat v≈°e
        console.log(`üíæ MongoDB: Celkov√Ω poƒçet u≈æivatel≈Ø: ${userCount}.`);
        return userCount;
    } catch (error) {
        console.error('‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø:', error);
        addLogEntry('ERROR', 'DB:getUserCount', `Chyba p≈ôi z√≠sk√°v√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø: ${error.message}`, null, null, null, error.stack);
        throw error;
    }
}


// === Funkce pro z√≠sk√°n√≠ V≈†ECH u≈æivatel≈Ø (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
async function getAllUsers() {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log('üíæ MongoDB: Z√≠sk√°v√°m v≈°echny u≈æivatele...');
    try {
        // Najdeme v≈°echny dokumenty v kolekci 'users', m≈Ø≈æeme ≈ôadit
        // Zde p≈ôedpokl√°d√°me, ≈æe user_id je string
        const users = await db.collection('users').find({}, { sort: { username: 1 } }).toArray(); // {} = bez filtru, ≈ôazen√≠ dle username
        console.log(`üíæ MongoDB: Naƒçteno ${users.length} u≈æivatel≈Ø.`);
        // Vr√°t√≠ pole dokument≈Ø { _id, user_id, username, created_at, ... }
        // Dashboard frontend oƒçek√°v√° pole objekt≈Ø s kl√≠ƒçi 'id' a 'username'. Mus√≠me transformovat.
         return users.map(user => ({ id: user.user_id, username: user.username })); // TRANSFORMACE PRO DASHBOARD
    } catch (error) {
        console.error('‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ v≈°ech u≈æivatel≈Ø:', error);
        addLogEntry('ERROR', 'DB:getAllUsers', `Chyba p≈ôi z√≠sk√°v√°n√≠ v≈°ech u≈æivatel≈Ø: ${error.message}`, null, null, null, error.stack);
        throw error;
    }
}


// === Funkce pro z√≠sk√°n√≠ seznamu v≈°ech NPC (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
// Funkce getAllNpcs je implementov√°na pro export, dashboard ji m≈Ø≈æe pou≈æ√≠t.
// Je mo≈æn√©, ≈æe ji dashboard pot≈ôebuje v jin√© formƒõ, ale prozat√≠m pou≈æijeme tu st√°vaj√≠c√≠.
// Pokud dashboard pot≈ôebuje kompletn√≠ NPC objekty, vr√°t√≠ je souƒçasn√° implementace getAllNpcs.
// Pokud pot≈ôebuje jen { id, name }, bude nutn√° transformace na stranƒõ dashboard serveru nebo v t√©to funkci.
// Prozat√≠m vrac√≠me kompletn√≠ dokumenty z DB.

// === Funkce pro z√≠sk√°n√≠ pamƒõti pro konkr√©tn√≠ subjekt (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
async function getMemoryForSubject(channelId = null, userId = null, npcId = null) {
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
     console.log(`üíæ MongoDB: Z√≠sk√°v√°m pamƒõ≈• pro subjekt (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'})...`);
     try {
          const memoryCollection = db.collection('memory');

          // MongoDB filtr pro nalezen√≠ pamƒõti pro konkr√©tn√≠ subjekt v dashboardu
          // Zde filtrujeme p≈ôesnƒõ na zadan√© hodnoty ID, vƒçetnƒõ null.
          const filter = {
               channel_id: channelId, // M≈Ø≈æe b√Ωt null
               user_id: userId,     // M≈Ø≈æe b√Ωt null
               npc_id: npcId,       // M≈Ø≈æe b√Ωt null
          };

          // Odfiltrujeme kl√≠ƒçe z filtru, pokud je jejich hodnota undefined (nemƒõlo by se st√°vat, kdy≈æ pou≈æ√≠v√°me || null)
          // const cleanedFilter = Object.fromEntries(Object.entries(filter).filter(([key, value]) => value !== undefined));

          // P≈ôid√°me ≈ôazen√≠ pro konzistentn√≠ zobrazen√≠ pamƒõti v dashboardu
          const options = { sort: { memory_key: 1 } }; // ≈òazen√≠ podle kl√≠ƒçe pamƒõti

          const memoryData = await memoryCollection.find(filter, options).toArray(); // Najdi dokumenty a p≈ôeved je na pole

          console.log(`üíæ MongoDB: Naƒçteno ${memoryData.length} pamƒõ≈•ov√Ωch z√°znam≈Ø pro subjekt.`);

          // Dashboard frontend oƒçek√°v√° pole objekt≈Ø s kl√≠ƒçi 'memory_key' a 'memory_value'. Mus√≠me transformovat.
          return memoryData.map(record => ({ memory_key: record.memory_key, memory_value: record.memory_value })); // TRANSFORMACE PRO DASHBOARD

     } catch (error) {
          console.error(`‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ pamƒõ≈•ov√Ωch z√°znam≈Ø pro subjekt (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'}):`, error);
          addLogEntry('ERROR', 'DB:getMemoryForSubject', `Chyba p≈ôi z√≠sk√°v√°n√≠ pamƒõti pro subjekt: ${error.message}`, userId, channelId, null, error.stack);
          throw error;
     }
}


// === Funkce pro p≈ôid√°n√≠ JEDNOTLIV√âHO pamƒõ≈•ov√©ho chunku (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
async function addMemoryChunk(channelId, userId, npcId, key, value) {
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
      console.log(`üíæ MongoDB: P≈ôid√°v√°m pamƒõ≈•ov√Ω chunk dashboardem (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'}, Kl√≠ƒç: "${key}")...`);
     try {
          const memoryCollection = db.collection('memory');
          // Dashboard funkce pro p≈ôid√°n√≠ by mƒõla pravdƒõpodobnƒõ tak√© umƒõt aktualizovat,
          // pokud z√°znam s dan√Ωmi ID a kl√≠ƒçem ji≈æ existuje. Pou≈æijeme tedy updateOne s upsert: true,
          // podobnƒõ jako saveMemoryChunk. Toto zamez√≠ chybƒõ duplicitn√≠ho kl√≠ƒçe.
           const filter = {
               channel_id: channelId || null,
               user_id: userId || null,
               npc_id: npcId || null,
               memory_key: key,
           };
           const updateDocument = {
               $set: {
                   memory_value: value,
                   updated_at: new Date(), // Aktualizujeme ƒças
               },
               $setOnInsert: {
                   created_at: new Date(), // Nastav√≠ ƒças vytvo≈ôen√≠ jen p≈ôi vlo≈æen√≠
               },
           };
           const options = { upsert: true };

           const result = await memoryCollection.updateOne(filter, updateDocument, options);


          // Kontrola v√Ωsledku operace
           if (result.upsertedCount > 0) {
               console.log(`üíæ MongoDB: Nov√Ω pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" vlo≈æen dashboardem (ID dokumentu: ${result.upsertedId}).`);
               // Vrac√≠me ID novƒõ vlo≈æen√©ho dokumentu nebo true/false dle pot≈ôeby dashboardu
               // Pokud dashboard oƒçek√°v√° ID novƒõ vytvo≈ôen√©ho z√°znamu, vr√°t√≠me result.upsertedId
               // Pokud dashboard oƒçek√°v√° jen boolean, vr√°t√≠me true
               return result.upsertedId ? result.upsertedId : true; // Zkus√≠me vr√°tit ID, pokud vlo≈æeno, jinak true
           } else if (result.modifiedCount > 0) {
               console.log(`üíæ MongoDB: Pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" aktualizov√°n dashboardem.`);
                return true; // Vrac√≠me true pro √∫spƒõ≈°nou aktualizaci
           } else if (result.matchedCount > 0) {
                console.warn(`üíæ MongoDB: Pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" nalezen dashboardem, ale hodnota se nezmƒõnila.`);
                 addLogEntry('WARN', 'DB:addMemoryChunk', `Pamƒõ≈• "${key}" nalezena, ≈æ√°dn√° zmƒõna dat.`, userId, channelId, null, null);
                return true; // Nalezen bez zmƒõny dat
           } else {
               console.warn(`üíæ MongoDB: Operace updateOne dashboardem na pamƒõti "${key}" nemƒõla vliv.`);
                addLogEntry('WARN', 'DB:addMemoryChunk', `Operace updateOne na pamƒõti "${key}" nemƒõla vliv.`, userId, channelId, null, null);
               return false; // Nic se nezmƒõnilo
           }


      } catch (error) {
           console.error(`‚ùå MongoDB: Chyba p≈ôi p≈ôid√°v√°n√≠/aktualizaci pamƒõ≈•ov√©ho chunku dashboardem pro kl√≠ƒç "${key}":`, error);
           addLogEntry('ERROR', 'DB:addMemoryChunk', `Chyba p≈ôi p≈ôid√°v√°n√≠/aktualizaci pamƒõti dashboardem: ${error.message}`, userId, channelId, null, error.stack);
           throw error; // Vyhod√≠ chybu
      }
}

// === Funkce pro smaz√°n√≠ pamƒõ≈•ov√©ho chunku (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
async function deleteMemoryChunk(channelId = null, userId = null, npcId = null, key) {
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
     console.log(`üíæ MongoDB: Ma≈æu pamƒõ≈•ov√Ω chunk dashboardem (Kan√°l: ${channelId || 'null'}, U≈æivatel: ${userId || 'null'}, NPC: ${npcId || 'null'}, Kl√≠ƒç: "${key}")...`);
     try {
          const memoryCollection = db.collection('memory');
          // Filtr pro nalezen√≠ dokumentu k smaz√°n√≠ podle kombinace ID a kl√≠ƒçe
          const filter = {
               channel_id: channelId || null,
               user_id: userId || null,
               npc_id: npcId || null,
               memory_key: key,
          };

          const result = await memoryCollection.deleteOne(filter); // Sma≈æe prvn√≠ nalezen√Ω dokument

          if (result.deletedCount > 0) {
              console.log(`üíæ MongoDB: Smaz√°n ${result.deletedCount} pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" dashboardem.`);
              return true; // Smaz√°no (v√≠cen√°sobn√© smaz√°n√≠ by pou≈æilo deleteMany)
          } else {
              console.log(`üíæ MongoDB: Pamƒõ≈•ov√Ω z√°znam pro kl√≠ƒç "${key}" nenalezen pro smaz√°n√≠ dashboardem.`);
              return false; // Nenalezeno
          }

     } catch (error) {
          console.error(`‚ùå MongoDB: Chyba p≈ôi maz√°n√≠ pamƒõ≈•ov√©ho chunku dashboardem pro kl√≠ƒç "${key}":`, error);
          addLogEntry('ERROR', 'DB:deleteMemoryChunk', `Chyba p≈ôi maz√°n√≠ pamƒõ≈•ov√©ho chunku dashboardem: ${error.message}`, userId, channelId, null, error.stack);
          throw error;
     }
}


// === Funkce pro z√≠sk√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø z DB (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
// Tato funkce je stejn√° jako getUniqueUserCount a m≈Ø≈æe ji nahradit, nebo getUniqueUserCount volat tuto.
// Pou≈æijeme tuto novƒõ p≈ôepsanou a uprav√≠me export.
// Ponech√°me ji zde s n√°zvem getUserCount.
async function getUserCount() {
    if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
    console.log('üíæ MongoDB: Z√≠sk√°v√°m celkov√Ω poƒçet u≈æivatel≈Ø...');
    try {
        // Poƒç√≠t√°me poƒçet dokument≈Ø v kolekci 'users'
        const userCount = await db.collection('users').countDocuments({}); // {} znamen√° bez filtru, poƒç√≠tat v≈°e
        console.log(`üíæ MongoDB: Celkov√Ω poƒçet u≈æivatel≈Ø: ${userCount}.`);
        return userCount;
    } catch (error) {
        console.error('‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø:', error);
        addLogEntry('ERROR', 'DB:getUserCount', `Chyba p≈ôi z√≠sk√°v√°n√≠ celkov√©ho poƒçtu u≈æivatel≈Ø: ${error.message}`, null, null, null, error.stack);
        throw error;
    }
}

// === Funkce pro z√≠sk√°n√≠ seznamu v≈°ech NPC (pro dashboard API) - P≈òEPS√ÅNO PRO MONGODB ===
async function getAllNpcs() {
     if (!db) throw new Error('MongoDB DB instance nen√≠ inicializov√°na.');
     console.log('üíæ MongoDB: Z√≠sk√°v√°m v≈°echny NPC pro dashboard...');
     try {
         // P≈ôedpokl√°d√°me kolekci 'npcs'. NPC by mƒõly m√≠t pole 'id' (Discord ID nebo vlastn√≠) a 'name'.
         const npcs = await db.collection('npcs').find({}, { sort: { name: 1 } }).toArray(); // {} = bez filtru, ≈ôazen√≠ dle jm√©na
         console.log(`üíæ MongoDB: Naƒçteno ${npcs.length} NPC pro dashboard.`);
          // Dashboard frontend oƒçek√°v√° pole objekt≈Ø s kl√≠ƒçi 'id' a 'name' pro zobrazen√≠ v seznamu NPC.
          // Vr√°t√≠me zjednodu≈°enou strukturu. Pokud dashboard pot≈ôebuje v√≠ce dat, uprav√≠me tuto funkci nebo dashboard frontend.
          return npcs.map(npc => ({ id: npc.id, name: npc.name, basePrompt: npc.basePrompt, description: npc.description })); // TRANSFORMACE PRO DASHBOARD (p≈ôid√°me i prompt/description pro detailnƒõj≈°√≠ zobrazen√≠)
     } catch (error) {
         console.error('‚ùå MongoDB: Chyba p≈ôi z√≠sk√°v√°n√≠ v≈°ech NPC pro dashboard:', error);
         addLogEntry('ERROR', 'DB:getAllNpcs', `Chyba p≈ôi z√≠sk√°v√°n√≠ v≈°ech NPC pro dashboard: ${error.message}`, null, null, null, error.stack);
         throw error;
     }
}


// <<<<<< ZDE ZAƒå√çN√Å EXPORT FUNKC√ç database.js >>>>>>>>
// Exportujeme v≈°echny p≈ôepsan√© funkce.
module.exports = {
    connect, // Funkce pro p≈ôipojen√≠ (MongoDB)
    close,    // Funkce pro ukonƒçen√≠ spojen√≠ (MongoDB)
    addLogEntry, // Logov√°n√≠ do DB (P≈òEPS√ÅNO)

    // P≈ôepsan√© funkce pro z√°kladn√≠ funkƒçnost bota
    loadActiveChannels, // P≈òEPS√ÅNO
    addActiveChannel,   // P≈òEPS√ÅNO
    removeActiveChannel,// P≈òEPS√ÅNO
    findOrCreateUser,   // P≈òEPS√ÅNO
    saveMessageHistory, // P≈òEPS√ÅNO
    saveMemoryChunk,    // P≈òEPS√ÅNO
    loadMessageHistory, // P≈òEPS√ÅNO
    loadMemoryChunks,   // P≈òEPS√ÅNO
    syncNpcConfigs,     // P≈òEPS√ÅNO

    // P≈ôepsan√© funkce pro dashboard (nyn√≠ odkomentovan√© a exportovan√©)
    getUserCount, // P≈òEPS√ÅNO
    getAllUsers, // P≈òEPS√ÅNO
    getAllNpcs, // P≈òEPS√ÅNO
    getMemoryForSubject, // P≈òEPS√ÅNO
    addMemoryChunk, // P≈òEPS√ÅNO
    deleteMemoryChunk, // P≈òEPS√ÅNO

    // Alias pro kompatibilitu s dashboard serverem, pokud oƒçek√°v√° getUniqueUserCount
    getUniqueUserCount: getUserCount, // Dashboard server v server.js pravdƒõpodobnƒõ vol√° tuto funkci

};

// <<< ZDE BY NEMƒöL B√ùT ≈Ω√ÅDN√ù K√ìD, KTER√ù SE SPUST√ç P≈òI NAƒåTEN√ç SOUBORU A VOL√Å FUNKCE EXPORTOVAN√â V√ù≈†E! >>>