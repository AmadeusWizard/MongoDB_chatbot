// src/features/memoryManager.js

// Import pot≈ôebn√Ωch modul≈Ø
const fs = require('fs');
const path = require('path');
const db = require('../db/database'); // Modul pro pr√°ci s datab√°z√≠
const apiService = require('./apiService'); // Modul pro komunikaci s AI API

// Cesta k souboru s konfigurac√≠ NPC (relativnƒõ k tomuto souboru v src/features/)
// !!! ZKONTROLOV√ÅNO: N√°zev promƒõnn√© je npcConfigsFilePath !!!
const npcConfigsFilePath = path.join(__dirname, '..', '..', 'config', 'npc_configs_v2.json');

// Promƒõnn√° pro uchov√°n√≠ konfigurac√≠ NPC v pamƒõti
let npcConfigs = {};
// Cache pro aktivn√≠ kan√°ly (channelId -> { guild_id, channel_id, npc_id })
let activeChannelsCache = new Map();
// Flag pro indikaci, zda jsou z√°kladn√≠ konfigurace naƒçteny
let isInitialized = false;
// Glob√°ln√≠ instance klienta, pokud ji pot≈ôebujeme v memoryManager (nap≈ô. pro z√≠sk√°n√≠ username)
// TOHLE JE VOLITELN√â A ZAT√çM NEN√ç P≈òED√ÅV√ÅNO!
let discordClient = null;

// === Funkce pro nastaven√≠ instance Discord klienta (pokud je t≈ôeba) ===
function setDiscordClient(client) {
    discordClient = client;
    console.log('--- DEBUG memoryManager: Instance Discord klienta nastavena.');
}

// === Funkce pro naƒç√≠t√°n√≠ NPC konfigurac√≠ ze souboru ===
async function loadNpcConfigs() {
    // !!! OPRAVENO: Pou≈æ√≠v√°me spr√°vn√Ω n√°zev promƒõnn√© npcConfigsFilePath !!!
    console.log(`--- DEBUG memoryManager: Naƒç√≠t√°m NPC konfigurace ze souboru: ${npcConfigsFilePath}`);
    try {
        // !!! OPRAVENO: Pou≈æ√≠v√°me spr√°vn√Ω n√°zev promƒõnn√© npcConfigsFilePath !!!
        const data = fs.readFileSync(npcConfigsFilePath, 'utf8');
        npcConfigs = JSON.parse(data);
        console.log(`ü§ñ Naƒçteno ${Object.keys(npcConfigs).length} konfigurac√≠ NPC.`);
        console.log('ü§ñ Konfigurace NPC ulo≈æeny do pamƒõti.');
        // console.log('--- DEBUG memoryManager: Naƒçten√© NPC konfigurace:', npcConfigs); // M≈Ø≈æe b√Ωt p≈ô√≠li≈° podrobn√© logov√°n√≠
        console.log(`ü§ñ Fin√°ln√≠ poƒçet naƒçten√Ωch NPC v npcConfigs: ${Object.keys(npcConfigs).length}`); // P≈ôid√°n log pro fin√°ln√≠ poƒçet
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ NPC konfigurac√≠:', error);
        // Pokud sel≈æe naƒçten√≠ NPC configs, bot nem≈Ø≈æe fungovat spr√°vnƒõ, mƒõl by b√Ωt ukonƒçen
        throw error; // Vyvol√°me chybu d√°l, aby ji zachytil bot.js
    }
}

// === Funkce pro z√≠sk√°n√≠ naƒçten√Ωch NPC konfigurac√≠ ===
function getNpcConfigs() {
    console.log('--- DEBUG memoryManager: Funkce getNpcConfigs() vol√°na.');
    // console.log('--- DEBUG memoryManager: Aktu√°ln√≠ stav npcConfigs v getNpcConfigs:', npcConfigs); // Tato zpr√°va byla odstranƒõna nebo zakomentov√°na
    console.log('--- DEBUG memoryManager: Poƒçet kl√≠ƒç≈Ø v npcConfigs v getNpcConfigs:', Object.keys(npcConfigs).length); // Tento log ponech√°me
    return npcConfigs; // Vrac√≠ aktu√°ln√≠ objekt s konfiguracemi NPC
}

// === Funkce pro naƒç√≠t√°n√≠ aktivn√≠ch kan√°l≈Ø z datab√°ze do cache ===
async function loadActiveChannelsFromDb() {
    console.log('--- DEBUG memoryManager: Naƒç√≠t√°m aktivn√≠ kan√°ly z datab√°ze...');
    try {
        const activeChannels = await db.loadActiveChannels(); // Vol√°me funkci z db modulu
        activeChannelsCache.clear(); // Vyƒçist√≠me cache p≈ôed naplnƒõn√≠m
        activeChannels.forEach(channel => {
            activeChannelsCache.set(channel.channel_id, channel);
        });
        console.log(`üåê Naƒçteno ${activeChannelsCache.size} aktivn√≠ch kan√°l≈Ø do pamƒõti bota.`);
        isInitialized = true; // Oznaƒç√≠me memoryManager jako inicializovan√Ω
        console.log('--- DEBUG memoryManager: Inicializace aktivn√≠ch kan√°l≈Ø dokonƒçena. isInitialized = true.');
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ aktivn√≠ch kan√°l≈Ø z DB:', error);
        isInitialized = false; // Pokud naƒçten√≠ sel≈æe, oznaƒç√≠me jako neinicializovan√Ω
        // Chyba p≈ôi naƒç√≠t√°n√≠ aktivn√≠ch kan√°l≈Ø je kritick√° pro MessageHandler, bot by nemƒõl reagovat
        throw error; // Vyvol√°me chybu d√°l
    }
}

// === Funkce pro kontrolu, zda je MemoryManager plnƒõ inicializov√°n ===
function isBotInitialized() {
    // Kontroluje, zda byly naƒçteny NPC konfigurace A aktivn√≠ kan√°ly
    // TODO: P≈ôidat kontrolu, zda je db.js tak√© p≈ôipraven (m√° spojen√≠?) - to se dƒõje v bot.js ready eventu.
    const npcConfigsLoaded = Object.keys(npcConfigs).length > 0; // Kontrola, zda je npcConfigs objekt naplnƒõn
    console.log(`--- DEBUG memoryManager: isBotInitialized kontrola - npcConfigsLoaded: ${npcConfigsLoaded}, activeChannelsCache.size: ${activeChannelsCache.size}, isInitialized flag: ${isInitialized}`);
    return isInitialized && npcConfigsLoaded;
}

// === Funkce pro z√≠sk√°n√≠ dat o aktivn√≠m kan√°lu z cache ===
function getActiveChannelData(channelId) {
    //console.log(`--- DEBUG memoryManager: Z√≠sk√°v√°m data o kan√°lu ${channelId} z cache.`); // P≈ô√≠li≈° ƒçast√© logov√°n√≠
    return activeChannelsCache.get(channelId); // Vrac√≠ objekt s daty kan√°lu nebo undefined
}

// === Funkce pro sestaven√≠ promptu pro AI ===
// Prompt by mƒõl obsahovat instrukce pro AI, kontext (NPC info, historie konverzace) a pamƒõ≈•.
// Tato funkce se vol√° z messageHandler.js
async function constructPrompt(channelId, userId, npcId, currentMessageContent) {
    console.log(`--- DEBUG memoryManager: Sestavuji prompt pro kan√°l ${channelId}, u≈æivatele ${userId}, NPC ${npcId}...`);
    // *** ZDE SE INICIALIZUJE POLE 'prompt'! BEZ T√âTO ≈ò√ÅDKY DOJDE K ReferenceError! ***
    const prompt = []; // <<< TATO ≈ò√ÅDKA JE KL√çƒåOV√Å A MUS√ç ZDE B√ùT!

    // 1. P≈ôid√°me syst√©movou zpr√°vu (instrukce pro AI a role NPC)
    // Z√≠sk√°me konfiguraci pro konkr√©tn√≠ NPC.
    const npcConfig = npcConfigs[npcId]; // npcConfigs je objekt naƒçten√Ω p≈ôi startu bota
    if (!npcConfig) {
        console.error(`‚ùå Chyba memoryManager: Konfigurace pro NPC ID "${npcId}" nenalezena!`);
        // Pokud konfigurace NPC chyb√≠, p≈ôid√°me alespo≈à obecnou syst√©movou zpr√°vu
        prompt.push({ role: 'system', content: 'Jsi u≈æiteƒçn√Ω asistent.' }); // Defaultn√≠ fallback
    } else {
        // Pou≈æijeme 'basePrompt' z konfigurace NPC jako hlavn√≠ syst√©movou instrukci
        prompt.push({ role: 'system', content: npcConfig.basePrompt });
        console.log('--- DEBUG memoryManager: P≈ôid√°n system prompt z NPC konfigurace.');
    }

    // 2. P≈ôid√°me pamƒõ≈•ov√© z√°znamy (dlouhodob√° pamƒõ≈• o u≈æivatel√≠ch a kontextu)
    console.log('--- DEBUG memoryManager: Naƒç√≠t√°m pamƒõ≈•ov√© z√°znamy pro kontext...');
    // Zde vol√°me funkci z database.js, kter√° naƒçte pamƒõ≈•ov√© z√°znamy
    // relevantn√≠ k dan√©mu kan√°lu, u≈æivateli a NPC.
    const memoryChunks = await db.loadMemoryChunks(channelId, userId, npcId); // <<-- ZDE SE NAƒå√çT√Å PAMƒö≈§ Z DATAB√ÅZE
    console.log(`--- DEBUG memoryManager: Naƒçteno ${memoryChunks.length} pamƒõ≈•ov√Ωch z√°znam≈Ø pro kontext.`);

    // Form√°tov√°n√≠ pamƒõ≈•ov√Ωch z√°znam≈Ø pro prompt AI
    if (memoryChunks.length > 0) {
        // P≈ôid√°me speci√°ln√≠ instrukci pro AI, jak m√° tuto pamƒõ≈• pou≈æ√≠t
        prompt.push({ role: 'system', content: "Tohle jsou d≈Øle≈æit√© informace o kontextu nebo u≈æivateli, kter√© si pamatuj a pou≈æij ve sv√© odpovƒõdi, pokud jsou relevantn√≠:" });
        // Ka≈æd√Ω pamƒõ≈•ov√Ω z√°znam p≈ôid√°me do pole prompt jako samostatnou zpr√°vu
        memoryChunks.forEach(chunk => {
            // Form√°t z√°le≈æ√≠ na preferovan√©m vstupu AI modelu. JSON je obvykl√Ω.
            // Nap≈ô.: { "kl√≠ƒç pamƒõti": "hodnota pamƒõti" }
            try {
                const memoryObject = {};
                memoryObject[chunk.memory_key] = chunk.memory_value;
                prompt.push({ role: 'system', content: JSON.stringify(memoryObject) }); // <<-- ZDE SE P≈òID√ÅV√Å PAMƒö≈§ DO POLE PROMPT≈Æ
            } catch (parseError) {
                console.error(`‚ùå Chyba p≈ôi form√°tov√°n√≠ pamƒõ≈•ov√©ho z√°znamu do JSON pro prompt (kl√≠ƒç "${chunk.memory_key}"):`, parseError);
                // Pokud sel≈æe form√°tov√°n√≠ jednoho z√°znamu, nevad√≠, zkus√≠me p≈ôidat jako text
                prompt.push({ role: 'system', content: `${chunk.memory_key}: ${chunk.memory_value}` }); // P≈ôid√°me jako prost√Ω text
            }
        });
        console.log('--- DEBUG memoryManager: Pamƒõ≈•ov√© z√°znamy p≈ôid√°ny do promptu.');
    } else {
        console.log('--- DEBUG memoryManager: ≈Ω√°dn√© pamƒõ≈•ov√© z√°znamy pro kontext nalezeny.');
    }

    // 3. P≈ôid√°me historii konverzace (kr√°tkodob√° pamƒõ≈• - posledn√≠ch 15 zpr√°v)
    // Naƒçteme posledn√≠ch N zpr√°v z datab√°ze pro dan√Ω kan√°l
    const historyLimit = 25; // Konfiguruj, kolik posledn√≠ch zpr√°v se m√° naƒç√≠st
    console.log(`--- DEBUG memoryManager: Naƒç√≠t√°m posledn√≠ch ${historyLimit} zpr√°v pro kontext...`);
    // Vol√°me funkci z database.js, kter√° naƒçte historii zpr√°v pro dan√Ω kan√°l.
    const messageHistory = await db.loadMessageHistory(channelId, historyLimit); // <<-- ZDE SE NAƒå√çT√Å HISTORIE ZPR√ÅV Z DATAB√ÅZE
    console.log(`--- DEBUG memoryManager: Naƒçteno ${messageHistory.length} zpr√°v pro kontext pamƒõti.`);

    // Form√°tov√°n√≠ historie konverzace pro prompt
    messageHistory.forEach(msg => { // <<-- PROCH√ÅZ√çME NAƒåTENOU HISTORII ZPR√ÅV
        // Zpr√°vy od u≈æivatele (role: 'user')
        if (!msg.is_bot) {
            prompt.push({ role: 'user', content: `${msg.user_username}: ${msg.content}` }); // <<-- P≈òID√ÅVAJ√ç SE U≈ΩIVATELSK√â ZPR√ÅVY
        }
        // Zpr√°vy od bota (NPC)
        else {
            // M≈Ø≈æeme pou≈æ√≠t roli 'assistant' pro zpr√°vy bota/AI
            prompt.push({ role: 'assistant', content: msg.content }); // <<-- P≈òID√ÅVAJ√ç SE ZPR√ÅVY BOTA
        }
    });
    console.log('--- DEBUG memoryManager: Historie konverzace p≈ôid√°na do promptu.');

    // 4. P≈ôid√°me aktu√°ln√≠ zpr√°vu u≈æivatele
    // Aktu√°ln√≠ zpr√°va u≈æivatele mus√≠ b√Ωt v≈ædy na konci promptu.
    console.log('--- DEBUG memoryManager: P≈ôid√°v√°m aktu√°ln√≠ zpr√°vu u≈æivatele do promptu.');
    // Sna≈æ√≠me se z√≠skat username aktu√°ln√≠ho u≈æivatele pro lep≈°√≠ form√°tov√°n√≠ promptu.
    let usernameForPrompt = `U≈æivatel_${userId}:`; // Fallback, pokud username nez√≠sk√°me
    // Zkus√≠me naj√≠t username z posledn√≠ zpr√°vy v naƒçten√© historii, pokud pat≈ô√≠ stejn√©mu u≈æivateli
    if (messageHistory.length > 0) {
        // Vytvo≈ô√≠me doƒçasnou kopii historie a obr√°t√≠me ji pro snaz≈°√≠ nalezen√≠ posledn√≠ zpr√°vy od u≈æivatele
        const reversedHistory = [...messageHistory].reverse();
        const lastUserMessage = reversedHistory.find(msg => !msg.is_bot && msg.user_id === userId);
        if (lastUserMessage) {
            usernameForPrompt = `${lastUserMessage.user_username}:`;
            console.log(`--- DEBUG memoryManager: Username pro u≈æivatele ${userId} pro prompt z√≠sk√°no z historie.`);
        } else {
            console.warn(`--- DEBUG memoryManager: Username pro u≈æivatele ${userId} pro prompt nebylo nalezeno v naƒçten√© historii. Pou≈æ√≠v√°m fallback.`);
        }
    } else {
        console.warn(`--- DEBUG memoryManager: Username pro u≈æivatele ${userId} pro prompt nebylo snadno dostupn√© (historie pr√°zdn√°). Pou≈æ√≠v√°m fallback.`);
    }

    // P≈ôid√°me samotnou aktu√°ln√≠ zpr√°vu od u≈æivatele na konec promptu.
    prompt.push({ role: 'user', content: `${usernameForPrompt} ${currentMessageContent}` }); // <<-- ZDE SE P≈òID√ÅV√Å AKTU√ÅLN√ç ZPR√ÅVA U≈ΩIVATELE

    // console.log('--- DEBUG memoryManager: Fin√°ln√≠ sestaven√Ω prompt:', prompt); // M≈Ø≈æe b√Ωt p≈ô√≠li≈° podrobn√© logov√°n√≠
    return prompt; // Vrac√≠ sestaven√Ω prompt ve form√°tu pro AI API
}

// Funkce pro p≈ôid√°n√≠ ID kan√°lu DO MAPY A S NPC ID
function addChannelToCache(channelId, npcId = null) {
    activeChannelsCache.set(channelId, {
        channel_id: channelId,
        npc_id: npcId
    });
    console.log(`--- DEBUG memoryManager: Kan√°l ${channelId} p≈ôid√°n/aktualizov√°n v cache (Map) s NPC ${npcId}. Aktu√°ln√≠ cache (pole z√°znam≈Ø):`, Array.from(activeChannelsCache.entries()));
}

// Funkce pro odebr√°n√≠ ID kan√°lu Z MAPY
function removeChannelFromCache(channelId) {
    const deleted = activeChannelsCache.delete(channelId);
    console.log(`--- DEBUG memoryManager: Pokus o odebr√°n√≠ kan√°lu ${channelId} z cache (Map). Odebr√°no: ${deleted}. Aktu√°ln√≠ cache (pole z√°znam≈Ø):`, Array.from(activeChannelsCache.entries()));
}

// === Funkce pro anal√Ωzu odpovƒõdi AI a ukl√°d√°n√≠ pamƒõti ===
// Bude vol√°na po p≈ôijet√≠ odpovƒõdi od AI.
// Mƒõla by analyzovat odpovƒõƒè a historii konverzace a identifikovat kl√≠ƒçov√© informace, kter√© se maj√≠ ulo≈æit do dlouhodob√© pamƒõti.
// Tato funkce se vol√° z messageHandler.js
async function analyzeAndSaveMemory(message, botResponseContent, npcId) {
    console.log(`--- DEBUG memoryManager: Spou≈°t√≠m anal√Ωzu pamƒõti pro kan√°l ${message.channel.id}, u≈æivatele ${message.author.id} a NPC ${npcId}...`);
    // Tato funkce je kl√≠ƒçov√° pro "uƒçen√≠" bota.
    // Mƒõla by:
    // 1. Vz√≠t historii konverzace (naƒçtenou zde) a odpovƒõƒè AI (botResponseContent - surov√° odpovƒõƒè).
    // 2. Analyzovat je (nap≈ô. pomoc√≠ dal≈°√≠ho vol√°n√≠ AI modelu s instrukcemi pro extrakci pamƒõti).
    // 3. Identifikovat kl√≠ƒçov√© informace o u≈æivateli nebo kontextu, kter√© jsou d≈Øle≈æit√© pro budouc√≠ interakce.
    // 4. Ulo≈æit tyto informace do datab√°ze pomoc√≠ db.saveMemoryChunk.

    // --- Zde je Z√ÅKLADN√ç IMPLEMENTACE anal√Ωzy pamƒõti pomoc√≠ API vol√°n√≠ ---
    // Vy≈°≈°√≠ √∫rove≈à logov√°n√≠ pro debugging anal√Ωzy pamƒõti
    console.log('--- DEBUG memoryManager: Analyzuji konverzaci pro extrakci pamƒõti...');
    const analysisPrompt = []; // Pole pro prompt pro anal√Ωzu pamƒõti

    // Syst√©mov√° zpr√°va pro AI - instrukce pro extrakci pamƒõti
    // *** ZDE JSME VYLEP≈†ILI INSTRUKCE PRO AI, ABY VRACELA P≈ò√çSNƒö JSON ***
    const memoryExtractionInstruction = `Jsi expert na extrakci kl√≠ƒçov√Ωch informac√≠ z konverzace pro dlouhodobou pamƒõ≈•. Tv√Ωm √∫kolem je **P≈ò√çSNƒö** identifikovat a extrahovat d≈Øle≈æit√© a relevantn√≠ informace o u≈æivateli nebo kontextu z n√°sleduj√≠c√≠ konverzace.

**IGNORUJ** pozdravy, vtipy, irelevantn√≠ odboƒçky, technick√© koment√°≈ôe o pamƒõti nebo AI a informace, kter√© u≈æ pravdƒõpodobnƒõ m√°≈° (pokud nov√° konverzace nep≈ôin√°≈°√≠ aktualizaci).

**ZAMƒö≈ò SE V√ùHRADNƒö NA FAKTA**, preference, z√°jmy, pl√°ny, nedokonƒçen√© √∫koly, nebo cokoli, co by mohlo b√Ωt kl√≠ƒçov√© a u≈æiteƒçn√© pro budouc√≠, personalizovan√© interakce s t√≠mto u≈æivatelem.

**VRA≈§ SVOU ODPOVƒöƒé V√ùHRADNƒö VE FORM√ÅTU ƒåIST√âHO JSON OBJEKTU.** **NEP≈òID√ÅVEJ ≈Ω√ÅDN√ù √öVODN√ç ANI Z√ÅVƒöREƒåN√ù TEXT P≈òED NEBO PO JSON OBJEKTU!** **Vr√°t√≠ se POUZE JSON OBJEKT \`{...}\`.**

Kl√≠ƒçe v JSON by mƒõly b√Ωt struƒçn√© textov√© ≈ôetƒõzce popisuj√≠c√≠ typ informace (nap≈ô. "Z√°jmy", "Pracovn√≠ pozice", "Pl√°ny na v√≠kend", "Obl√≠ben√° barva"). Hodnoty by mƒõly b√Ωt konkr√©tn√≠ informace, kter√© jsi extrahoval/a, tak√© jako textov√© ≈ôetƒõzce.

Pokud nejsou v konverzaci **≈æ√°dn√© nov√© relevantn√≠ informace** k extrakci pro dlouhodobou pamƒõ≈•, vra≈• **PR√ÅZDN√ù JSON objekt**: \`{}\`.

**P≈ò√çKLAD PO≈ΩADOVAN√âHO FORM√ÅTU (POUZE JSON):**
\`\`\`json
{
  "Jm√©no u≈æivatele": "Petr",
  "Obl√≠ben√° barva": "modr√°",
  "Pl√°ny na v√≠kend": "J√≠t na t√∫ru do hor"
}
\`\`\`

Analyzuj n√°sleduj√≠c√≠ konverzaci (historie a posledn√≠ zpr√°va):`;
    analysisPrompt.push({ role: 'system', content: memoryExtractionInstruction });
    console.log('--- DEBUG memoryManager: P≈ôid√°na vylep≈°en√° instrukce pro extrakci pamƒõti do promptu anal√Ωzy.');

    // Naƒçteme historii konverzace, kterou budeme analyzovat
    // M≈Ø≈æeme pou≈æ√≠t stejn√Ω limit jako pro hlavn√≠ prompt, nebo jin√Ω, del≈°√≠.
    const analysisHistoryLimit = 25; // Poƒçet zpr√°v pro anal√Ωzu pamƒõti
    console.log(`--- DEBUG memoryManager: Naƒç√≠t√°m posledn√≠ch ${analysisHistoryLimit} zpr√°v pro kontext anal√Ωzy pamƒõti...`);
    // message objekt obsahuje channel.id a author.id, co≈æ pot≈ôebujeme pro loadMessageHistory
    const conversationForAnalysis = await db.loadMessageHistory(message.channel.id, analysisHistoryLimit);
    console.log(`--- DEBUG memoryManager: Naƒçteno ${conversationForAnalysis.length} zpr√°v pro kontext anal√Ωzy pamƒõti.`);

    // P≈ôid√°me historii konverzace do promptu anal√Ωzy
    conversationForAnalysis.forEach(msg => {
        if (!msg.is_bot) {
            // Form√°tov√°n√≠ zpr√°v u≈æivatele pro anal√Ωzu
            analysisPrompt.push({ role: 'user', content: `${msg.user_username || 'U≈æivatel'}: ${msg.content}` });
        } else {
            // Form√°tov√°n√≠ zpr√°v bota (NPC) pro anal√Ωzu
            // Pou≈æijeme surovou odpovƒõƒè bota, kter√° byla ulo≈æena (botResponseContent), pokud je k dispozici a je string.
            // To zajist√≠, ≈æe analyzujeme i to, co bot "myslel", vƒçetnƒõ </think> tag≈Ø, kter√© mohou obsahovat info pro pamƒõ≈•.
            // Pokud fullApiResponse (co≈æ je botResponseContent z messageHandleru) nen√≠ string, pou≈æijeme obsah z DB.
            const botContentForAnalysis = (botResponseContent && typeof botResponseContent === 'string') ? botResponseContent : msg.content;
            analysisPrompt.push({ role: 'assistant', content: botContentForAnalysis });
        }
    });
    console.log('--- DEBUG memoryManager: Historie konverzace p≈ôid√°na do promptu anal√Ωzy pamƒõti.');

    // console.log('--- DEBUG memoryManager: Fin√°ln√≠ prompt pro anal√Ωzu pamƒõti:', analysisPrompt); // M≈Ø≈æe b√Ωt p≈ô√≠li≈° podrobn√©

    // Vol√°n√≠ AI API pro extrakci pamƒõti
    console.log('--- DEBUG memoryManager: Vol√°m apiService.getChatCompletion pro anal√Ωzu pamƒõti.');
    // API Service by mƒõl vr√°tit STRING s v√Ωsledkem anal√Ωzy (oƒçek√°v√°me JSON STRING), nebo null p≈ôi chybƒõ/pr√°zdn√© odpovƒõdi.
    const memoryAnalysisResult = await apiService.getChatCompletion(analysisPrompt); // Vol√°me API s promptem pro anal√Ωzu
    console.log('--- DEBUG memoryManager: Surov√° odpovƒõƒè od AI pro anal√Ωzu pamƒõti p≈ôijata:', memoryAnalysisResult);

    // Zpracov√°n√≠ v√Ωsledku anal√Ωzy (oƒçek√°v√°me JSON STRING)
    if (memoryAnalysisResult && typeof memoryAnalysisResult === 'string') {
        try {
            // AI by mƒõla vr√°tit pouze JSON STRING. Zkus√≠me parsovat.
            // *** P≈òID√ÅNO ROBUSTNƒöJ≈†√ç PARSOV√ÅN√ç: Zkus√≠me extrahovat JSON objekt z textu ***
            let jsonString = memoryAnalysisResult.trim();
            const startIndex = jsonString.indexOf('{');
            const endIndex = jsonString.lastIndexOf('}');

            if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {
                // Extrahujeme text od prvn√≠ho '{' do posledn√≠ho '}'
                jsonString = jsonString.substring(startIndex, endIndex + 1);
                console.log('--- DEBUG memoryManager: Extrahovan√Ω potenci√°ln√≠ JSON string pro parsov√°n√≠:', jsonString);
            } else {
                console.warn('--- DEBUG memoryManager: Nelze naj√≠t standardn√≠ JSON objekt ({...}) ve v√Ωsledku anal√Ωzy pamƒõti. Zkus√≠m parsovat celou odpovƒõƒè.');
                // Pokud nelze extrahovat JSON objekt, zkus√≠me parsovat celou odpovƒõƒè, pokud je to validn√≠ JSON bez okoln√≠ho textu.
                // jsonString z≈Øst√°v√° trimovanou p≈Øvodn√≠ odpovƒõd√≠.
            }
            // *** Konec robustnƒõj≈°√≠ho parsov√°n√≠ ***

            const memoryToSave = JSON.parse(jsonString); // <<< ZDE SE POKOU≈†√çME PARSOVAT (U≈Ω POTENCI√ÅLNƒö "VYƒåI≈†TƒöN√ù") STRING

            console.log('--- DEBUG memoryManager: Parsed JSON z anal√Ωzy pamƒõti:', memoryToSave);

            // Ulo≈æen√≠ extrahovan√Ωch pamƒõ≈•ov√Ωch "chunk≈Ø" do datab√°ze
            if (memoryToSave && typeof memoryToSave === 'object' && Object.keys(memoryToSave).length > 0) { // Kontrola, zda je to objekt a nen√≠ pr√°zdn√Ω
                console.log('--- DEBUG memoryManager: Ukl√°d√°m extrahovanou pamƒõ≈• do DB...');
                for (const key in memoryToSave) {
                    // Ujist√≠me se, ≈æe se jedn√° o vlastn√≠ vlastnost objektu a hodnota nen√≠ null/undefined
                    if (Object.hasOwnProperty.call(memoryToSave, key) && memoryToSave[key] !== null && memoryToSave[key] !== undefined) {
                        const value = memoryToSave[key];
                        // Ulo≈æ√≠me ka≈æd√Ω kl√≠ƒç/hodnotu jako samostatn√Ω pamƒõ≈•ov√Ω chunk
                        // saveMemoryChunk(channelId, userId, npcId, key, value)
                        // Ukl√°d√°me pamƒõ≈• v kontextu kan√°lu, u≈æivatele a NPC
                        // message.channel.id, message.author.id, npcId jsou k dispozici z argument≈Ø funkce
                        console.log(`--- DEBUG memoryManager: Pokus o ulo≈æen√≠ pamƒõ≈•ov√©ho z√°znamu: Kl√≠ƒç="${key}", Hodnota="${String(value).substring(0, 50)}..."`); // Logujeme jen zaƒç√°tek hodnoty
                        await db.saveMemoryChunk(message.channel.id, message.author.id, npcId, key, String(value)); // Ukl√°d√°me pamƒõ≈•! P≈ôevedeme hodnotu na STRING pro jistotu
                        console.log(`--- DEBUG memoryManager: Ulo≈æen pamƒõ≈•ov√Ω z√°znam: Kl√≠ƒç="${key}".`);
                    } else {
                        console.warn(`--- DEBUG memoryManager: P≈ôeskakuji ukl√°d√°n√≠ pamƒõ≈•ov√©ho z√°znamu s kl√≠ƒçem "${key}" - hodnota je null/undefined nebo nen√≠ vlastn√≠ vlastnost√≠ objektu.`);
                    }
                }
                console.log('--- DEBUG memoryManager: Ukl√°d√°n√≠ extrahovan√© pamƒõti dokonƒçeno.');
            } else {
                console.warn('--- DEBUG memoryManager: Anal√Ωza pamƒõti vr√°tila JSON, ale nen√≠ to objekt nebo je pr√°zdn√Ω. ≈Ω√°dn√° pamƒõ≈• k ulo≈æen√≠.');
            }
        } catch (parseError) {
            // *** ZMƒöNƒöN√â LOGOV√ÅN√ç CHYBY PARSOV√ÅN√ç: ZALOGUJEME I SUROV√ù V√ùSLEDEK PRO DEBUGGING ***
            console.error('‚ùå Chyba p≈ôi parsov√°n√≠ JSON z v√Ωsledku anal√Ωzy pamƒõti:', parseError);
            console.error('‚ùå Surov√Ω v√Ωsledek anal√Ωzy, kter√Ω selhal p≈ôi parsov√°n√≠:', memoryAnalysisResult); // ZALOGUJEME CEL√ù SUROV√ù V√ùSLEDEK
            // Logujeme chybu, ale proces pokraƒçuje
        }
    } else {
        console.warn('--- DEBUG memoryManager: AI pro anal√Ωzu pamƒõti nevr√°tila ≈æ√°dn√Ω text nebo nevr√°tila string. P≈ôeskakuji parsov√°n√≠ a ukl√°d√°n√≠ pamƒõti.');
        console.log('--- DEBUG memoryManager: Surov√° data pro anal√Ωzu pamƒõti (oƒçek√°v√°n string):', memoryAnalysisResult);
    }
    // --- Konec Z√ÅKLADN√ç IMPLEMENTACE anal√Ωzy pamƒõti ---
}

// Exportujeme pot≈ôebn√© funkce a vlastnosti modulu
// <<<<<< ZDE ZAƒå√çN√Å EXPORT memoryManager.js >>>>>>>>
module.exports = {
    setDiscordClient, // Exportujeme funkci pro nastaven√≠ klienta
    loadNpcConfigs,
    getNpcConfigs, // Exportujeme funkci pro z√≠sk√°n√≠ NPC configs
    loadActiveChannelsFromDb,
    removeChannelFromCache,
    addChannelToCache,
    isBotInitialized, // Exportujeme stav inicializace
    getActiveChannelData, // Exportujeme funkci pro z√≠sk√°n√≠ dat kan√°lu
    constructPrompt, // Exportujeme funkci pro sestaven√≠ promptu
    analyzeAndSaveMemory, // Exportujeme funkci pro anal√Ωzu a ukl√°d√°n√≠ pamƒõti
    activeChannelsCache, // Exportujeme cache s aktivn√≠mi kan√°ly pro dashboard (pokud ji dashboard pot≈ôebuje)
};
// <<<<<< ZDE KONƒå√ç EXPORT memoryManager.js >>>>>>>>